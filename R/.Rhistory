# **Should have all the function R files and MPLN.stan in the same working directory as this file
# Reading needed code
source("AIC_function.R")
source("AIC3_function.R")
source("BIC_function.R")
source("Calc_likelihood.R")
source("Calculate_parameters.R")
source("Calling_clustering.R")
source("Cluster_mpln.R")
source("ICL_function.R")
source("Initialization_run.R")
source("Main_mpln.R")
source("MPLNdata_generator.R")
source("Package_check.R")
source("Stan_run.R")
source("Zvalue_calculation.R")
source("Visualize_mpln.R")
# Values for data simulation
true_mu1 <- c(6.5,6,6,6,6,6)
true_mu2 <- c(2,2.5,2,2,2,2)
true_sigma1 <- diag(6) * 2
true_sigma2 <- diag(6)
# Data simulated is saved as 'simulated_counts'
simulated_counts <- Datagenerator_mpln(N = 100, d = 6, pi_g = c(0.79,0.21), means = rbind(true_mu1,true_mu2), sigmas = rbind(true_sigma1,true_sigma2), ProduceImage="Yes")
# Checking/Loading needed packages
LoadCheckPkg(pckgs=c("parallel","rstan","Rcpp","mclust","mvtnorm","edgeR","capushe","clusterGeneration","coda"))
# Making RStan model
mod = stan_model("MPLN.stan")
# Calculate the number of cores
no_cores = detectCores()-1
# Initiate cluster
cl = makeCluster(no_cores)
# Doing clusterExport
clusterExport(cl,c("mod", "simulated_counts","zvalue_calculation", "calc_likelihood", "stanrun", "initializationrun", "BIC_function","ICL_function","AIC_function","AIC3_function", "calculate_parameters", "cluster_mpln", "calling_clustering"))
# Doing clusterEvalQ
# Other packages may needed to be downloaded using clusterEvalQ
clusterEvalQ(cl, library(parallel))
clusterEvalQ(cl, library(rstan))
clusterEvalQ(cl, library(Rcpp))
clusterEvalQ(cl, library(mclust))
clusterEvalQ(cl, library(mvtnorm))
clusterEvalQ(cl, library(edgeR))
clusterEvalQ(cl, library(capushe))
clusterEvalQ(cl, library(clusterGeneration))
clusterEvalQ(cl, library(coda))
# Running clustering
MPLNClust_results <- main_mpln(dataset=simulated_counts$dataset,
membership=simulated_counts$truemembership,
Gmin=2,
Gmax=2,
n_chains=3,
n_iterations=300,
init_method="kmeans",
n_init_iterations=0,
normalize=NA)
# To visualize clustering
visualize_mpln(dataset=simulated_counts$dataset, ClusterMembershipVector=simulated_counts$truemembership)
pheatmap(as.matrix(dataset[vec,]), show_colnames = T, labels_col=colnames(dataset), annotation_row =annotation_row , fontface="italic", legend = T, scale ="row",border_color = "black", cluster_row = FALSE, cluster_col = FALSE, color =  rev(redgreen(1000)) )
dataset=simulated_counts$dataset
ClusterMembershipVector=MPLNClust_results$BIC.all$BICmodelselected_labels
ClusterMembershipVector
pheatmap(as.matrix(dataset[vec,]), show_colnames = T, labels_col=colnames(dataset), annotation_row =annotation_row , fontface="italic", legend = T, scale ="row",border_color = "black", cluster_row = FALSE, cluster_col = FALSE, color =  rev(redgreen(1000)) )
# Checking/ Loading needed packages
LoadCheckPkg(pckgs=c("pheatmap","gplots","RColorBrewer","MASS"))
# Obtaining path to save images
pathNow<-getwd()
# Saving cluster membership for each observation
DataPlusLabs=cbind(dataset,ClusterMembershipVector)
ordervector = list()
anothervector = list()
for (i in 1:max(ClusterMembershipVector)){
ordervector[[i]]=which(DataPlusLabs[,ncol(dataset)+1]==i)
anothervector[[i]]=rep(i,length(which(DataPlusLabs[,ncol(dataset)+1]==i)))
}
vec<-unlist(ordervector)
colorsvector<-unlist(anothervector)
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
annotation_row = data.frame(
Cluster = factor(ClusterMembershipVector[vec]))
if(is.null(rownames(dataset)) == TRUE){
rownames(dataset)  = paste("Gene",c(1:nrow(dataset[vec,])))
rownames(annotation_row) = rownames(dataset[vec,])
}else{
rownames(annotation_row) = rownames(dataset[vec,])
}
pheatmap(as.matrix(dataset[vec,]), show_colnames = T, labels_col=colnames(dataset), annotation_row =annotation_row , fontface="italic", legend = T, scale ="row",border_color = "black", cluster_row = FALSE, cluster_col = FALSE, color =  rev(redgreen(1000)) )
dev.off()
pheatmap(as.matrix(dataset[vec,]), show_colnames = T, labels_col=colnames(dataset), annotation_row =annotation_row , fontface="italic", legend = T, scale ="row",border_color = "black", cluster_row = FALSE, cluster_col = FALSE, color =  rev(redgreen(1000)) )
pdf("Image.pdf")
pheatmap(as.matrix(dataset[vec,]), show_colnames = T, labels_col=colnames(dataset), annotation_row =annotation_row , fontface="italic", legend = T, scale ="row",border_color = "black", cluster_row = FALSE, cluster_col = FALSE, color =  rev(redgreen(1000)) )
dev.off()
