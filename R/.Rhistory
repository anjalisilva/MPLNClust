devtools::install_github("stan-dev/rstanarm", args = "--preclean")
source("MPLNDataGenerator.R")
source("main_mpln.R")
#### Running data ####
# Generating data
true_mu1 <- c(6.5,6,6,6,6,6)
true_mu2 <- c(2,2.5,2,2,2,2)
true_sigma1 <- diag(6) * 2
true_sigma2 <- diag(6)
simulated_counts <- Datagenerator(i = 1, N = 50, d = 6, pi_g = c(0.79,0.21), means = rbind(true_mu1,true_mu2), sigmas = rbind(true_sigma1,true_sigma2), ProduceImage="Yes")
# testing_dataset <- simulated_counts$dataset # Assign test dataset using the variable name
# Making RStan model #
# LoadCheckPkg(pckgs=c("parallel","rstan"))
# rstan_options(auto_write = TRUE)
# options(mc.cores = parallel::detectCores())
# Making RStan model #
# mod = stan_model("MPLN.stan")
# Calculate the number of cores
# no_cores = detectCores()-1
# Initiate cluster
# cl = makeCluster(no_cores)
# print("Doing clusterExport")
# clusterExport(cl,c("mod", "testing_dataset","zvalue_calculation", "calc_likelihood", "stanrun", "initializationrun", "BIC_function","ICL_function","AIC_function","AIC3_function", "calculate_parameters", "cluster_mpln", "calling_clustering"))
mod = stan_model("MPLN.stan")
setwd("/Volumes/GoogleDrive/My Drive/UGuelph/Analysis_Anjali'sLaptop/All algorithms (Monte Carlo EM)/mixtures_of_MPLN/Git/GitHub/R")
mod = stan_model("MPLN.stan")
show(mod)
source("MPLNDataGenerator.R")
source("main_mpln.R")
#### Running data ####
# Generating data
true_mu1 <- c(6.5,6,6,6,6,6)
true_mu2 <- c(2,2.5,2,2,2,2)
true_sigma1 <- diag(6) * 2
true_sigma2 <- diag(6)
simulated_counts <- Datagenerator(i = 1, N = 50, d = 6, pi_g = c(0.79,0.21), means = rbind(true_mu1,true_mu2), sigmas = rbind(true_sigma1,true_sigma2), ProduceImage="Yes")
# testing_dataset <- simulated_counts$dataset # Assign test dataset using the variable name
# Making RStan model #
# LoadCheckPkg(pckgs=c("parallel","rstan"))
# rstan_options(auto_write = TRUE)
#
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
mod = stan_model("MPLN.stan")
show(mod)
NegBinom_sim_2clusters<-main_mpln(y=simulated_counts$dataset, Gmin=2, Gmax=3, mod=mod, n_chain=3, numb_iterations=300, membership=NA, init_method="kmeans", init_iterations=0, normalize="TMM")
