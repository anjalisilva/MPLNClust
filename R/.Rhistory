source("AIC_function.R")
source("AIC3_function.R")
source("BIC_function.R")
source("Calc_likelihood.R")
source("Calculate_parameters.R")
source("Calling_clustering.R")
source("Cluster_mpln.R")
source("ICL_function.R")
source("Initialization_run.R")
source("Main_mpln.R")
source("MPLNdata_generator.R")
source("Package_check.R")
source("Stan_run.R")
source("Zvalue_calculation.R")
true_mu1 <- c(6.5,6,6,6,6,6)
true_mu2 <- c(2,2.5,2,2,2,2)
true_sigma1 <- diag(6) * 2
true_sigma2 <- diag(6)
# Data simulated is saved as 'simulated_counts'
simulated_counts <- Datagenerator_mpln(N = 50, d = 6, pi_g = c(0.79,0.21), means = rbind(true_mu1,true_mu2), sigmas = rbind(true_sigma1,true_sigma2), ProduceImage="Yes")
LoadCheckPkg(pckgs=c("parallel","rstan","Rcpp","mclust","mvtnorm","edgeR","capushe","clusterGeneration","coda"))
# Making RStan model
mod = stan_model("MPLN.stan")
# Calculate the number of cores
no_cores = detectCores()-1
# Initiate cluster
cl = makeCluster(no_cores)
cat("\n Doing clusterExport")
clusterExport(cl,c("mod", "simulated_counts","zvalue_calculation", "calc_likelihood", "stanrun", "initializationrun", "BIC_function","ICL_function","AIC_function","AIC3_function", "calculate_parameters", "cluster_mpln", "calling_clustering"))
cat("\n Doing clusterEvalQ")
# Other packages need to be downloaded using clusterEvalQ
clusterEvalQ(cl, library(parallel))
clusterEvalQ(cl, library(rstan))
clusterEvalQ(cl, library(Rcpp))
clusterEvalQ(cl, library(mclust))
clusterEvalQ(cl, library(mvtnorm))
clusterEvalQ(cl, library(edgeR))
clusterEvalQ(cl, library(capushe))
clusterEvalQ(cl, library(clusterGeneration))
clusterEvalQ(cl, library(coda))
MPLNClust_results <- main_mpln(y=simulated_counts$dataset, membership=simulated_counts$truemembership, Gmin=1, Gmax=1, n_chains=3, n_iterations=100, init_method="kmeans", n_init_iterations=0, normalize=NA)
y=simulated_counts$dataset
membership=simulated_counts$truemembership
membership
Gmin=1
Gmax=1
n_chains=3
n_iterations=100
init_method="kmeans"
n_init_iterations=0
normalize=NA
ptm<-proc.time()
if (typeof(y) != "double" & typeof(y) != "integer"){
stop("Dataset type needs to be integer");}
if (Gmax<Gmin){
stop("Gmax cannot be less than Gmin");}
if(is.na(n_iterations)) n_iterations <- 1000
if(n_iterations<40){
stop("RStan n_iterations argument should be greater than 40");}
if((is.na(n_init_iterations) != TRUE && n_init_iterations == !0) && is.na(init_method) == TRUE){
stop("Number of initialization iterations specified, but no initialization method selected");}
d<-ncol(y)
n<-nrow(y)
if(all(is.na(membership)!=TRUE) && length(membership)!=n){
stop("Length of membership character vector and sample size of dataset should match");}
if(all(is.na(membership)!=TRUE) && all((diff(sort(unique(membership)))==1)!=TRUE) ){
stop("Cluster memberships in the membership vector are missing a cluster, e.g. 1,3,4,5,6 is missing cluster 2");}
if(length(which(apply(y, 1, function(x) all(x==0))==TRUE))!=0){
cat("\nDataset row(s)", c(which(apply(y, 1, function(x) all(x==0))==TRUE)), "will be removed as this/these contain(s) all zeros")
if(all(is.na(membership)==FALSE)){membership<-membership[-c(which(apply(y, 1, function(x) all(x==0))==TRUE))]}
y<-y[-c(which(apply(y, 1, function(x) all(x==0))==TRUE)),]
n<-nrow(y)
}
if(all(is.na(membership)==TRUE)){
membership<-"Not provided"}
if (Gmax > n){
stop("Gmax cannot be larger than n");}
if(is.na(normalize) == FALSE) {
norm_factors<-log(as.vector(calcNormFactors(as.matrix(y), method = "TMM")))
} else {norm_factors<-rep(0,d)}
y
Gmin=1
Gmax=1
n_chain=n_chains
n_chain
numb_iterations=n_iterations
numb_iterations
nit_method=init_method
init_method=init_method
init_method
init_method
init_iterations=n_init_iterations
init_iterations
norm_factors=norm_factors
norm_factors
mod=mod
mod
test = calling_clustering(y=y, Gmin=g, Gmax=g, n_chain=n_chains, numb_iterations=n_iterations, init_method=init_method, init_iterations=n_init_iterations, norm_factors=norm_factors, mod=mod)
g=1
test = calling_clustering(y=y, Gmin=g, Gmax=g, n_chain=n_chains, numb_iterations=n_iterations, init_method=init_method, init_iterations=n_init_iterations, norm_factors=norm_factors, mod=mod)
Gmin
ptm_inner = proc.time()
gmodel=1
if(length(1:(Gmax-Gmin+1)) == Gmax){
clustersize = gmodel
}else if(length(1:(Gmax-Gmin+1)) < Gmax){
clustersize = seq(Gmin, Gmax, 1)[gmodel]
}
if(init_iterations!=0){
#cat("\nRunning initialization for G =", clustersize)
initializeruns=initializationrun(gmodel=clustersize, y=y, init_method=init_method, init_iterations=init_iterations, n_chain=n_chain, numb_iterations=numb_iterations, initialization=NA, normalizefactors=norm_factors, mod=mod)
#cat("\nInitialization done for G =", clustersize)
#cat("\nRunning clustering for G =", clustersize)
allruns=cluster_mpln(y=y,z=NA,G=clustersize,n_chain=n_chain,numb_iterations=numb_iterations, initialization=initializeruns,normalizefac=norm_factors, mod=mod)
#cat("\nClustering done for G =", clustersize)
}else if(init_iterations == 0){
#cat("\nNo initialization done for G =", clustersize)
#cat("\nRunning clustering for G =", clustersize)
allruns=cluster_mpln(y=y, z=unmap(kmeans(log(y+1/3),clustersize)$cluster), G=clustersize, n_chain=n_chain, numb_iterations=numb_iterations, initialization=NA, normalizefac=norm_factors, mod=mod)
#cat("\nClustering done for G =", clustersize)
}
cluster_mpln
source("AIC_function.R")
source("AIC3_function.R")
source("BIC_function.R")
source("Calc_likelihood.R")
source("Calculate_parameters.R")
source("Calling_clustering.R")
source("Cluster_mpln.R")
source("ICL_function.R")
source("Initialization_run.R")
source("Main_mpln.R")
source("MPLNdata_generator.R")
source("Package_check.R")
source("Stan_run.R")
source("Zvalue_calculation.R")
MPLNClust_results <- main_mpln(y=simulated_counts$dataset, membership=simulated_counts$truemembership, Gmin=1, Gmax=1, n_chains=3, n_iterations=100, init_method="kmeans", n_init_iterations=0, normalize=NA)
source("Calling_clustering.R")
calling_clustering
cat("\n Doing clusterExport")
clusterExport(cl,c("mod", "simulated_counts","zvalue_calculation", "calc_likelihood", "stanrun", "initializationrun", "BIC_function","ICL_function","AIC_function","AIC3_function", "calculate_parameters", "cluster_mpln", "calling_clustering"))
MPLNClust_results <- main_mpln(y=simulated_counts$dataset, membership=simulated_counts$truemembership, Gmin=1, Gmax=1, n_chains=3, n_iterations=100, init_method="kmeans", n_init_iterations=0, normalize=NA)
?source
