}
}
visualize_mpln(dataset=simulated_counts$dataset, ClusterMembershipVector=c(rep(1,25),rep(2,25)), name="Sim200data")
visualize_mpln<-function(dataset, ClusterMembershipVector, name='', plots='all', Xpanels=NA, Ypanels=NA, FMT='pdf'){
selectPLTformat <- function(filename,FMT='png') {
# internal function to allow selecting different figure formats
fileName <- paste0(filename,".",FMT)
cat(paste("Saving plot to ",filename,'\n'))
if (FMT == "pdf") {
pdf(fileName)
} else {
png(fileName)
}
}
# checking optional arguments...
if ( (!is.na(Xpanels) && !is.numeric(Xpanels)) || (is.numeric(Xpanels) && Xpanels<=0) ) {
stop("Xpanels argument should be a positive number!")
}
if ((!is.na(Ypanels) && !is.numeric(Ypanels)) || (is.numeric(Ypanels) && (Ypanels<=0))) {
stop("Ypanels argument should be a poisitive number!")
}
# Obtaining path to save images
pathNow<-getwd()
# Saving cluster membership for each observation
DataPlusLabs=cbind(dataset,ClusterMembershipVector)
ordervector = list()
anothervector = list()
for (i in 1:max(ClusterMembershipVector)){
ordervector[[i]]=which(DataPlusLabs[,ncol(dataset)+1]==i)
anothervector[[i]]=rep(i,length(which(DataPlusLabs[,ncol(dataset)+1]==i)))
}
vec<-unlist(ordervector)
colorsvector<-unlist(anothervector)
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
if (plots=='all' || plots=='heatmaps') {
# Heatmap 1
selectPLTformat(paste0(pathNow,"/Clustering_Heatmap1_",name),FMT)
heatmap.2(as.matrix(dataset[vec,]),dendrogram="column",trace="none",scale="row",
Rowv=FALSE,  col = rev(redgreen(75)), RowSideColors=col_vector[colorsvector+1])
par(xpd=TRUE)
legend("topleft",
legend = paste0("Cluster ", unique(colorsvector)),
col = unique(col_vector[colorsvector+1]),
lty= 1,
lwd = 5,
cex=.5,  xpd = TRUE, horiz = FALSE
)
dev.off()
# Heatmap 2
annotation_row = data.frame(
Cluster = factor(ClusterMembershipVector[vec]))
if(is.null(rownames(dataset)) == TRUE){
rownames(dataset)  = paste("Gene",c(1:nrow(dataset[vec,])))
rownames(annotation_row) = rownames(dataset[vec,])
}else{
rownames(annotation_row) = rownames(dataset[vec,])
}
selectPLTformat(paste0(pathNow,"/Clustering_Heatmap2_",name),FMT)
pheatmap(as.matrix(dataset[vec,]), show_colnames = T, labels_col=colnames(dataset), annotation_row =annotation_row , fontface="italic", legend = T, scale ="row",border_color = "black", cluster_row = FALSE, cluster_col = FALSE, color =  rev(redgreen(1000)) )
dev.off()
}
if (plots=='all' || plots=='lines') {
# Line Plots
# set up grid of plots based on Xpanels and Ypanels arguments
# default is to organize in sqrt(N)xsqrt(N)
NbrClstrs <- length(unique(ClusterMembershipVector))
if (is.numeric(Xpanels) && is.numeric(Ypanels)) {
# bath Xpanels and Ypanels specified by user
par(mfrow=c(Ypanels,Xpanels))
} else if (is.na(Xpanels) && is.numeric(Ypanels)) {
# Ypanel specfied but not Xpanel
par(mfrow=c(Ypanels,round(NbrClstrs/Ypanels)))
} else if (is.numeric(Xpanels) && is.na(Ypanels)) {
# Xpanel specified but not Ypanel
par(mfrow=c(round(NbrClstrs/Xpanels)),Xpanels)
} else if (is.na(Xpanels) && is.na(Ypanels)) {
# default case: neither Xpanels nor Ypanels specified --> tile in sqrt(N)xsqrt(N)
sqrtNbrClstrs <- round(sqrt(NbrClstrs))
par(mfrow=c(sqrtNbrClstrs,sqrtNbrClstrs))
}
#par(mfrow=c(2,0.5*length(unique(ClusterMembershipVector))))
for(cluster in unique(ClusterMembershipVector)){
selectPLTformat(paste0(pathNow,"/Clustering_LinePlots_Cluster",cluster,"_",name),FMT)
# Save how many observations below to each cluster size, given by 'cluster'
toplot_1=as.matrix(DataPlusLabs[which(DataPlusLabs[,ncol(dataset)+1]==cluster),c(1:ncol(dataset))], ncol=ncol(dataset))
# Save column mean in last row
toplot1=rbind(log(toplot_1+1), colMeans(log(toplot_1+1)))
# If discontinunity is needed between samples (e.g. for 6 samples)
# toplot1_space=cbind(toplot1[,c(1:3)],rep(NA,nrow(toplot_1)+1),toplot1[,c(4:6)])
if (cluster==7){
# alter the colour from yellow, since yellow is used as average line colour
matplot(t(toplot1), type="l", pch=1, col=c(rep("maroon",nrow(toplot_1)),7), xlab="Samples", ylab="Expression (log counts)", cex=1, lty=c(rep(2,nrow(toplot_1)),1),lwd=c(rep(1,nrow(toplot_1)),3), xaxt="n", xlim=c(1,ncol(toplot1)), main=paste("Cluster ",cluster))
}
matplot(t(toplot1), type="l", pch=1, col=c(rep(cluster,nrow(toplot_1)),7), xlab="Samples", ylab="Expression (log counts)", cex=1, lty=c(rep(2,nrow(toplot_1)),1),lwd=c(rep(1,nrow(toplot_1)),3), xaxt="n", xlim=c(1,ncol(toplot1)), main=paste("Cluster ",cluster))
axis(1,at = c(1:ncol(dataset)), labels=colnames(dataset))
dev.off()
}
}
}
visualize_mpln(dataset=simulated_counts$dataset, ClusterMembershipVector=c(rep(1,25),rep(2,25)), name="Sim200data")
visualize_mpln<-function(dataset, ClusterMembershipVector, name='', plots='all', Xpanels=NA, Ypanels=NA, FMT='pdf'){
selectPLTformat <- function(filename,FMT='png') {
# internal function to allow selecting different figure formats
fileName <- paste0(filename,".",FMT)
cat(paste("Saving plot to ",filename,'\n'))
if (FMT == "pdf") {
pdf(fileName)
} else {
png(fileName)
}
}
# checking optional arguments...
if ( (!is.na(Xpanels) && !is.numeric(Xpanels)) || (is.numeric(Xpanels) && Xpanels<=0) ) {
stop("Xpanels argument should be a positive number!")
}
if ((!is.na(Ypanels) && !is.numeric(Ypanels)) || (is.numeric(Ypanels) && (Ypanels<=0))) {
stop("Ypanels argument should be a poisitive number!")
}
# Obtaining path to save images
pathNow<-getwd()
# Saving cluster membership for each observation
DataPlusLabs=cbind(dataset,ClusterMembershipVector)
ordervector = list()
anothervector = list()
for (i in 1:max(ClusterMembershipVector)){
ordervector[[i]]=which(DataPlusLabs[,ncol(dataset)+1]==i)
anothervector[[i]]=rep(i,length(which(DataPlusLabs[,ncol(dataset)+1]==i)))
}
vec<-unlist(ordervector)
colorsvector<-unlist(anothervector)
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
if (plots=='all' || plots=='heatmaps') {
# Heatmap 1
selectPLTformat(paste0(pathNow,"/Clustering_Heatmap1_",name),FMT)
heatmap.2(as.matrix(dataset[vec,]),dendrogram="column",trace="none",scale="row",
Rowv=FALSE,  col = rev(redgreen(75)), RowSideColors=col_vector[colorsvector+1])
par(xpd=TRUE)
legend("topleft",
legend = paste0("Cluster ", unique(colorsvector)),
col = unique(col_vector[colorsvector+1]),
lty= 1,
lwd = 5,
cex=.5,  xpd = TRUE, horiz = FALSE
)
dev.off()
# Heatmap 2
annotation_row = data.frame(
Cluster = factor(ClusterMembershipVector[vec]))
if(is.null(rownames(dataset)) == TRUE){
rownames(dataset)  = paste("Gene",c(1:nrow(dataset[vec,])))
rownames(annotation_row) = rownames(dataset[vec,])
}else{
rownames(annotation_row) = rownames(dataset[vec,])
}
selectPLTformat(paste0(pathNow,"/Clustering_Heatmap2_",name),FMT)
pheatmap(as.matrix(dataset[vec,]), show_colnames = T, labels_col=colnames(dataset), annotation_row =annotation_row , fontface="italic", legend = T, scale ="row",border_color = "black", cluster_row = FALSE, cluster_col = FALSE, color =  rev(redgreen(1000)) )
dev.off()
}
if (plots=='all' || plots=='lines') {
# Line Plots
# set up grid of plots based on Xpanels and Ypanels arguments
# default is to organize in sqrt(N)xsqrt(N)
NbrClstrs <- length(unique(ClusterMembershipVector))
if (is.numeric(Xpanels) && is.numeric(Ypanels)) {
# bath Xpanels and Ypanels specified by user
par(mfrow=c(Ypanels,Xpanels))
} else if (is.na(Xpanels) && is.numeric(Ypanels)) {
# Ypanel specfied but not Xpanel
par(mfrow=c(Ypanels,round(NbrClstrs/Ypanels)))
} else if (is.numeric(Xpanels) && is.na(Ypanels)) {
# Xpanel specified but not Ypanel
par(mfrow=c(round(NbrClstrs/Xpanels)),Xpanels)
} else if (is.na(Xpanels) && is.na(Ypanels)) {
# default case: neither Xpanels nor Ypanels specified --> tile in sqrt(N)xsqrt(N)
sqrtNbrClstrs <- round(sqrt(NbrClstrs))
par(mfrow=c(sqrtNbrClstrs,sqrtNbrClstrs))
}
#par(mfrow=c(2,0.5*length(unique(ClusterMembershipVector))))
for(cluster in unique(ClusterMembershipVector)){
selectPLTformat(paste0(pathNow,"/Clustering_LinePlots_Cluster",cluster,"_",name),FMT)
# Save how many observations below to each cluster size, given by 'cluster'
toplot_1=as.matrix(DataPlusLabs[which(DataPlusLabs[,ncol(dataset)+1]==cluster),c(1:ncol(dataset))], ncol=ncol(dataset))
# Save column mean in last row
toplot1=rbind(log(toplot_1+1), colMeans(log(toplot_1+1)))
# If discontinunity is needed between samples (e.g. for 6 samples)
# toplot1_space=cbind(toplot1[,c(1:3)],rep(NA,nrow(toplot_1)+1),toplot1[,c(4:6)])
if (cluster==7){
# alter the colour from yellow, since yellow is used as average line colour
matplot(t(toplot1), type="l", pch=1, col=c(rep("maroon",nrow(toplot_1)),7), xlab="Samples", ylab="Expression (log counts)", cex=1, lty=c(rep(2,nrow(toplot_1)),1),lwd=c(rep(1,nrow(toplot_1)),3), xaxt="n", xlim=c(1,ncol(toplot1)), main=paste("Cluster ",cluster))
}
matplot(t(toplot1), type="l", pch=1, col=c(rep(cluster,nrow(toplot_1)),7), xlab="Samples", ylab="Expression (log counts)", cex=1, lty=c(rep(2,nrow(toplot_1)),1),lwd=c(rep(1,nrow(toplot_1)),3), xaxt="n", xlim=c(1,ncol(toplot1)), main=paste("Cluster ",cluster))
axis(1,at = c(1:ncol(dataset)), labels=colnames(dataset))
dev.off()
}
}
}
visualize_mpln(dataset=simulated_counts$dataset, ClusterMembershipVector=c(rep(7,25),rep(2,25)), name="Sim200data")
selectPLTformat <- function(filename,FMT='png') {
# internal function to allow selecting different figure formats
fileName <- paste0(filename,".",FMT)
cat(paste("Saving plot to ",filename,'\n'))
if (FMT == "pdf") {
pdf(fileName)
} else {
png(fileName)
}
}
if ( (!is.na(Xpanels) && !is.numeric(Xpanels)) || (is.numeric(Xpanels) && Xpanels<=0) ) {
stop("Xpanels argument should be a positive number!")
}
if ((!is.na(Ypanels) && !is.numeric(Ypanels)) || (is.numeric(Ypanels) && (Ypanels<=0))) {
stop("Ypanels argument should be a poisitive number!")
}
pathNow<-getwd()
DataPlusLabs=cbind(dataset,ClusterMembershipVector)
ordervector = list()
anothervector = list()
for (i in 1:max(ClusterMembershipVector)){
ordervector[[i]]=which(DataPlusLabs[,ncol(dataset)+1]==i)
anothervector[[i]]=rep(i,length(which(DataPlusLabs[,ncol(dataset)+1]==i)))
}
vec<-unlist(ordervector)
colorsvector<-unlist(anothervector)
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
if (plots=='all' || plots=='heatmaps') {
# Heatmap 1
selectPLTformat(paste0(pathNow,"/Clustering_Heatmap1_",name),FMT)
heatmap.2(as.matrix(dataset[vec,]),dendrogram="column",trace="none",scale="row",
Rowv=FALSE,  col = rev(redgreen(75)), RowSideColors=col_vector[colorsvector+1])
par(xpd=TRUE)
legend("topleft",
legend = paste0("Cluster ", unique(colorsvector)),
col = unique(col_vector[colorsvector+1]),
lty= 1,
lwd = 5,
cex=.5,  xpd = TRUE, horiz = FALSE
)
dev.off()
# Heatmap 2
annotation_row = data.frame(
Cluster = factor(ClusterMembershipVector[vec]))
if(is.null(rownames(dataset)) == TRUE){
rownames(dataset)  = paste("Gene",c(1:nrow(dataset[vec,])))
rownames(annotation_row) = rownames(dataset[vec,])
}else{
rownames(annotation_row) = rownames(dataset[vec,])
}
selectPLTformat(paste0(pathNow,"/Clustering_Heatmap2_",name),FMT)
pheatmap(as.matrix(dataset[vec,]), show_colnames = T, labels_col=colnames(dataset), annotation_row =annotation_row , fontface="italic", legend = T, scale ="row",border_color = "black", cluster_row = FALSE, cluster_col = FALSE, color =  rev(redgreen(1000)) )
dev.off()
}
if (plots=='all' || plots=='lines') {
# Line Plots
# set up grid of plots based on Xpanels and Ypanels arguments
# default is to organize in sqrt(N)xsqrt(N)
NbrClstrs <- length(unique(ClusterMembershipVector))
if (is.numeric(Xpanels) && is.numeric(Ypanels)) {
# bath Xpanels and Ypanels specified by user
par(mfrow=c(Ypanels,Xpanels))
} else if (is.na(Xpanels) && is.numeric(Ypanels)) {
# Ypanel specfied but not Xpanel
par(mfrow=c(Ypanels,round(NbrClstrs/Ypanels)))
} else if (is.numeric(Xpanels) && is.na(Ypanels)) {
# Xpanel specified but not Ypanel
par(mfrow=c(round(NbrClstrs/Xpanels)),Xpanels)
} else if (is.na(Xpanels) && is.na(Ypanels)) {
# default case: neither Xpanels nor Ypanels specified --> tile in sqrt(N)xsqrt(N)
sqrtNbrClstrs <- round(sqrt(NbrClstrs))
par(mfrow=c(sqrtNbrClstrs,sqrtNbrClstrs))
}
#par(mfrow=c(2,0.5*length(unique(ClusterMembershipVector))))
for(cluster in unique(ClusterMembershipVector)){
selectPLTformat(paste0(pathNow,"/Clustering_LinePlots_Cluster",cluster,"_",name),FMT)
# Save how many observations below to each cluster size, given by 'cluster'
toplot_1=as.matrix(DataPlusLabs[which(DataPlusLabs[,ncol(dataset)+1]==cluster),c(1:ncol(dataset))], ncol=ncol(dataset))
# Save column mean in last row
toplot1=rbind(log(toplot_1+1), colMeans(log(toplot_1+1)))
# If discontinunity is needed between samples (e.g. for 6 samples)
# toplot1_space=cbind(toplot1[,c(1:3)],rep(NA,nrow(toplot_1)+1),toplot1[,c(4:6)])
if (cluster==7){
# alter the colour from yellow, since yellow is used as average line colour
matplot(t(toplot1), type="l", pch=1, col=c(rep("maroon",nrow(toplot_1)),7), xlab="Samples", ylab="Expression (log counts)", cex=1, lty=c(rep(2,nrow(toplot_1)),1),lwd=c(rep(1,nrow(toplot_1)),3), xaxt="n", xlim=c(1,ncol(toplot1)), main=paste("Cluster ",cluster))
}
matplot(t(toplot1), type="l", pch=1, col=c(rep(cluster,nrow(toplot_1)),7), xlab="Samples", ylab="Expression (log counts)", cex=1, lty=c(rep(2,nrow(toplot_1)),1),lwd=c(rep(1,nrow(toplot_1)),3), xaxt="n", xlim=c(1,ncol(toplot1)), main=paste("Cluster ",cluster))
axis(1,at = c(1:ncol(dataset)), labels=colnames(dataset))
dev.off()
}
}
visualize_mpln(dataset=simulated_counts$dataset, ClusterMembershipVector=c(rep(7,25),rep(2,25)), name="Sim200data")
dataset=simulated_counts$dataset
ClusterMembershipVector=c(rep(7,25),rep(2,25))
name="Sim200data"
selectPLTformat <- function(filename,FMT='png') {
# internal function to allow selecting different figure formats
fileName <- paste0(filename,".",FMT)
cat(paste("Saving plot to ",filename,'\n'))
if (FMT == "pdf") {
pdf(fileName)
} else {
png(fileName)
}
}
if ( (!is.na(Xpanels) && !is.numeric(Xpanels)) || (is.numeric(Xpanels) && Xpanels<=0) ) {
stop("Xpanels argument should be a positive number!")
}
if ((!is.na(Ypanels) && !is.numeric(Ypanels)) || (is.numeric(Ypanels) && (Ypanels<=0))) {
stop("Ypanels argument should be a poisitive number!")
}
pathNow<-getwd()
DataPlusLabs=cbind(dataset,ClusterMembershipVector)
ordervector = list()
anothervector = list()
for (i in 1:max(ClusterMembershipVector)){
ordervector[[i]]=which(DataPlusLabs[,ncol(dataset)+1]==i)
anothervector[[i]]=rep(i,length(which(DataPlusLabs[,ncol(dataset)+1]==i)))
}
vec<-unlist(ordervector)
colorsvector<-unlist(anothervector)
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
if (plots=='all' || plots=='heatmaps') {
# Heatmap 1
selectPLTformat(paste0(pathNow,"/Clustering_Heatmap1_",name),FMT)
heatmap.2(as.matrix(dataset[vec,]),dendrogram="column",trace="none",scale="row",
Rowv=FALSE,  col = rev(redgreen(75)), RowSideColors=col_vector[colorsvector+1])
par(xpd=TRUE)
legend("topleft",
legend = paste0("Cluster ", unique(colorsvector)),
col = unique(col_vector[colorsvector+1]),
lty= 1,
lwd = 5,
cex=.5,  xpd = TRUE, horiz = FALSE
)
dev.off()
# Heatmap 2
annotation_row = data.frame(
Cluster = factor(ClusterMembershipVector[vec]))
if(is.null(rownames(dataset)) == TRUE){
rownames(dataset)  = paste("Gene",c(1:nrow(dataset[vec,])))
rownames(annotation_row) = rownames(dataset[vec,])
}else{
rownames(annotation_row) = rownames(dataset[vec,])
}
selectPLTformat(paste0(pathNow,"/Clustering_Heatmap2_",name),FMT)
pheatmap(as.matrix(dataset[vec,]), show_colnames = T, labels_col=colnames(dataset), annotation_row =annotation_row , fontface="italic", legend = T, scale ="row",border_color = "black", cluster_row = FALSE, cluster_col = FALSE, color =  rev(redgreen(1000)) )
dev.off()
}
plots=='all' || plots=='lines'
plots
plots
unique(ClusterMembershipVector)
cluster=7
selectPLTformat(paste0(pathNow,"/Clustering_LinePlots_Cluster",cluster,"_",name),FMT)
toplot_1=as.matrix(DataPlusLabs[which(DataPlusLabs[,ncol(dataset)+1]==cluster),c(1:ncol(dataset))], ncol=ncol(dataset))
toplot1=rbind(log(toplot_1+1), colMeans(log(toplot_1+1)))
if (cluster==7){
# alter the colour from yellow, since yellow is used as average line colour
matplot(t(toplot1), type="l", pch=1, col=c(rep("maroon",nrow(toplot_1)),7), xlab="Samples", ylab="Expression (log counts)", cex=1, lty=c(rep(2,nrow(toplot_1)),1),lwd=c(rep(1,nrow(toplot_1)),3), xaxt="n", xlim=c(1,ncol(toplot1)), main=paste("Cluster ",cluster))
}
if (cluster==7){
# alter the colour from yellow, since yellow is used as average line colour
matplot(t(toplot1), type="l", pch=1, col=c(rep("maroon",nrow(toplot_1)),7), xlab="Samples", ylab="Expression (log counts)", cex=1, lty=c(rep(2,nrow(toplot_1)),1),lwd=c(rep(1,nrow(toplot_1)),3), xaxt="n", xlim=c(1,ncol(toplot1)), main=paste("Cluster ",cluster))
}else{
matplot(t(toplot1), type="l", pch=1, col=c(rep(cluster,nrow(toplot_1)),7), xlab="Samples", ylab="Expression (log counts)", cex=1, lty=c(rep(2,nrow(toplot_1)),1),lwd=c(rep(1,nrow(toplot_1)),3), xaxt="n", xlim=c(1,ncol(toplot1)), main=paste("Cluster ",cluster))}
axis(1,at = c(1:ncol(dataset)), labels=colnames(dataset))
dev.off()
v
dev.off()
matplot(t(toplot1), type="l", pch=1, col=c(rep("maroon",nrow(toplot_1)),7), xlab="Samples", ylab="Expression (log counts)", cex=1, lty=c(rep(2,nrow(toplot_1)),1),lwd=c(rep(1,nrow(toplot_1)),3), xaxt="n", xlim=c(1,ncol(toplot1)), main=paste("Cluster ",cluster))
cluster=2
selectPLTformat(paste0(pathNow,"/Clustering_LinePlots_Cluster",cluster,"_",name),FMT)
toplot_1=as.matrix(DataPlusLabs[which(DataPlusLabs[,ncol(dataset)+1]==cluster),c(1:ncol(dataset))], ncol=ncol(dataset))
toplot1=rbind(log(toplot_1+1), colMeans(log(toplot_1+1)))
if (cluster==7){
# alter the colour from yellow, since yellow is used as average line colour
matplot(t(toplot1), type="l", pch=1, col=c(rep("maroon",nrow(toplot_1)),7), xlab="Samples", ylab="Expression (log counts)", cex=1, lty=c(rep(2,nrow(toplot_1)),1),lwd=c(rep(1,nrow(toplot_1)),3), xaxt="n", xlim=c(1,ncol(toplot1)), main=paste("Cluster ",cluster))
}else{
matplot(t(toplot1), type="l", pch=1, col=c(rep(cluster,nrow(toplot_1)),7), xlab="Samples", ylab="Expression (log counts)", cex=1, lty=c(rep(2,nrow(toplot_1)),1),lwd=c(rep(1,nrow(toplot_1)),3), xaxt="n", xlim=c(1,ncol(toplot1)), main=paste("Cluster ",cluster))}
axis(1,at = c(1:ncol(dataset)), labels=colnames(dataset))
dev.off()
for(cluster in unique(ClusterMembershipVector)){
selectPLTformat(paste0(pathNow,"/Clustering_LinePlots_Cluster",cluster,"_",name),FMT)
# Save how many observations below to each cluster size, given by 'cluster'
toplot_1=as.matrix(DataPlusLabs[which(DataPlusLabs[,ncol(dataset)+1]==cluster),c(1:ncol(dataset))], ncol=ncol(dataset))
# Save column mean in last row
toplot1=rbind(log(toplot_1+1), colMeans(log(toplot_1+1)))
# If discontinunity is needed between samples (e.g. for 6 samples)
# toplot1_space=cbind(toplot1[,c(1:3)],rep(NA,nrow(toplot_1)+1),toplot1[,c(4:6)])
if (cluster==7){
# alter the colour from yellow, since yellow is used as average line colour
matplot(t(toplot1), type="l", pch=1, col=c(rep("maroon",nrow(toplot_1)),7), xlab="Samples", ylab="Expression (log counts)", cex=1, lty=c(rep(2,nrow(toplot_1)),1),lwd=c(rep(1,nrow(toplot_1)),3), xaxt="n", xlim=c(1,ncol(toplot1)), main=paste("Cluster ",cluster))
}else{
matplot(t(toplot1), type="l", pch=1, col=c(rep(cluster,nrow(toplot_1)),7), xlab="Samples", ylab="Expression (log counts)", cex=1, lty=c(rep(2,nrow(toplot_1)),1),lwd=c(rep(1,nrow(toplot_1)),3), xaxt="n", xlim=c(1,ncol(toplot1)), main=paste("Cluster ",cluster))}
axis(1,at = c(1:ncol(dataset)), labels=colnames(dataset))
dev.off()
}
visualize_mpln<-function(dataset, ClusterMembershipVector, name='', plots='all', Xpanels=NA, Ypanels=NA, FMT='pdf'){
selectPLTformat <- function(filename,FMT='png') {
# internal function to allow selecting different figure formats
fileName <- paste0(filename,".",FMT)
cat(paste("Saving plot to ",filename,'\n'))
if (FMT == "pdf") {
pdf(fileName)
} else {
png(fileName)
}
}
# checking optional arguments...
if ( (!is.na(Xpanels) && !is.numeric(Xpanels)) || (is.numeric(Xpanels) && Xpanels<=0) ) {
stop("Xpanels argument should be a positive number!")
}
if ((!is.na(Ypanels) && !is.numeric(Ypanels)) || (is.numeric(Ypanels) && (Ypanels<=0))) {
stop("Ypanels argument should be a poisitive number!")
}
# Obtaining path to save images
pathNow<-getwd()
# Saving cluster membership for each observation
DataPlusLabs=cbind(dataset,ClusterMembershipVector)
ordervector = list()
anothervector = list()
for (i in 1:max(ClusterMembershipVector)){
ordervector[[i]]=which(DataPlusLabs[,ncol(dataset)+1]==i)
anothervector[[i]]=rep(i,length(which(DataPlusLabs[,ncol(dataset)+1]==i)))
}
vec<-unlist(ordervector)
colorsvector<-unlist(anothervector)
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
if (plots=='all' || plots=='heatmaps') {
# Heatmap 1
selectPLTformat(paste0(pathNow,"/Clustering_Heatmap1_",name),FMT)
heatmap.2(as.matrix(dataset[vec,]),dendrogram="column",trace="none",scale="row",
Rowv=FALSE,  col = rev(redgreen(75)), RowSideColors=col_vector[colorsvector+1])
par(xpd=TRUE)
legend("topleft",
legend = paste0("Cluster ", unique(colorsvector)),
col = unique(col_vector[colorsvector+1]),
lty= 1,
lwd = 5,
cex=.5,  xpd = TRUE, horiz = FALSE
)
dev.off()
# Heatmap 2
annotation_row = data.frame(
Cluster = factor(ClusterMembershipVector[vec]))
if(is.null(rownames(dataset)) == TRUE){
rownames(dataset)  = paste("Gene",c(1:nrow(dataset[vec,])))
rownames(annotation_row) = rownames(dataset[vec,])
}else{
rownames(annotation_row) = rownames(dataset[vec,])
}
selectPLTformat(paste0(pathNow,"/Clustering_Heatmap2_",name),FMT)
pheatmap(as.matrix(dataset[vec,]), show_colnames = T, labels_col=colnames(dataset), annotation_row =annotation_row , fontface="italic", legend = T, scale ="row",border_color = "black", cluster_row = FALSE, cluster_col = FALSE, color =  rev(redgreen(1000)) )
dev.off()
}
if (plots=='all' || plots=='lines') {
# Line Plots
# set up grid of plots based on Xpanels and Ypanels arguments
# default is to organize in sqrt(N)xsqrt(N)
NbrClstrs <- length(unique(ClusterMembershipVector))
if (is.numeric(Xpanels) && is.numeric(Ypanels)) {
# bath Xpanels and Ypanels specified by user
par(mfrow=c(Ypanels,Xpanels))
} else if (is.na(Xpanels) && is.numeric(Ypanels)) {
# Ypanel specfied but not Xpanel
par(mfrow=c(Ypanels,round(NbrClstrs/Ypanels)))
} else if (is.numeric(Xpanels) && is.na(Ypanels)) {
# Xpanel specified but not Ypanel
par(mfrow=c(round(NbrClstrs/Xpanels)),Xpanels)
} else if (is.na(Xpanels) && is.na(Ypanels)) {
# default case: neither Xpanels nor Ypanels specified --> tile in sqrt(N)xsqrt(N)
sqrtNbrClstrs <- round(sqrt(NbrClstrs))
par(mfrow=c(sqrtNbrClstrs,sqrtNbrClstrs))
}
#par(mfrow=c(2,0.5*length(unique(ClusterMembershipVector))))
for(cluster in unique(ClusterMembershipVector)){
selectPLTformat(paste0(pathNow,"/Clustering_LinePlots_Cluster",cluster,"_",name),FMT)
# Save how many observations below to each cluster size, given by 'cluster'
toplot_1=as.matrix(DataPlusLabs[which(DataPlusLabs[,ncol(dataset)+1]==cluster),c(1:ncol(dataset))], ncol=ncol(dataset))
# Save column mean in last row
toplot1=rbind(log(toplot_1+1), colMeans(log(toplot_1+1)))
# If discontinunity is needed between samples (e.g. for 6 samples)
# toplot1_space=cbind(toplot1[,c(1:3)],rep(NA,nrow(toplot_1)+1),toplot1[,c(4:6)])
if (cluster==7){
# alter the colour from yellow, since yellow is used as average line colour
matplot(t(toplot1), type="l", pch=1, col=c(rep("maroon",nrow(toplot_1)),7), xlab="Samples", ylab="Expression (log counts)", cex=1, lty=c(rep(2,nrow(toplot_1)),1),lwd=c(rep(1,nrow(toplot_1)),3), xaxt="n", xlim=c(1,ncol(toplot1)), main=paste("Cluster ",cluster))
}else{
matplot(t(toplot1), type="l", pch=1, col=c(rep(cluster,nrow(toplot_1)),7), xlab="Samples", ylab="Expression (log counts)", cex=1, lty=c(rep(2,nrow(toplot_1)),1),lwd=c(rep(1,nrow(toplot_1)),3), xaxt="n", xlim=c(1,ncol(toplot1)), main=paste("Cluster ",cluster))}
axis(1,at = c(1:ncol(dataset)), labels=colnames(dataset))
dev.off()
}
}
}
visualize_mpln(dataset=simulated_counts$dataset, ClusterMembershipVector=c(rep(7,25),rep(2,25)), name="Sim200data")
visualize_mpln(dataset=simulated_counts$dataset, ClusterMembershipVector=c(rep(7,25),rep(2,25)), name="Sim200data")
source("Setup.R")
source("Package_check.R")
source("Calc_likelihood.R")
source("Calculate_parameters.R")
source("Calling_clustering.R")
source("Cluster_mpln.R")
source("Initialization_run.R")
source("Main_mpln.R")
source("Model_selection.R")
source("MPLNdata_generator.R")
source("Remove_Zero_Counts.R")
source("Stan_run.R")
source("Visualize_mpln.R")
source("Zvalue_calculation.R")
